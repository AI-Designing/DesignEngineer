#!/usr/bin/env python3
"""
FreeCAD Code Executor for Continuous Generation
Executes generated FreeCAD Python code and creates actual 3D models
"""

import glob
import json
import logging
import os
import sys
import time
from datetime import datetime
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class FreeCADExecutor:
    """Execute generated FreeCAD code and create 3D models"""

    def __init__(self, session_dir: str):
        self.session_dir = Path(session_dir)
        self.executed_files = set()

    def get_freecad_template(
        self, original_code: str, generation_id: int, requirements: str
    ) -> str:
        """Create a complete FreeCAD script template"""

        template = f'''#!/usr/bin/env python3
"""
Auto-generated FreeCAD script
Generation ID: {generation_id}
Requirements: {requirements}
Created: {datetime.now()}
"""

import FreeCAD as App
import Part
import Draft
import os
import sys

# Create new document if none exists
if not App.ActiveDocument:
    doc = App.newDocument("AutoGenerated_{generation_id:03d}")
else:
    doc = App.ActiveDocument

print(f"[FreeCAD] Starting generation {generation_id}")
print(f"[FreeCAD] Requirements: {requirements}")

try:
    # Generated code starts here
{self._indent_code(original_code)}

    # Generated code ends here

    # Fit all in view and save
    import FreeCADGui as Gui
    if hasattr(Gui, 'ActiveDocument') and Gui.ActiveDocument:
        Gui.ActiveDocument.ActiveView.fitAll()

    # Save the document
    output_path = os.path.join(os.path.dirname(__file__), f"generated_model_{generation_id:03d}.FCStd")
    doc.saveAs(output_path)
    print(f"[FreeCAD] Model saved to: {{output_path}}")

    # Export to STEP format for compatibility
    step_path = os.path.join(os.path.dirname(__file__), f"generated_model_{generation_id:03d}.step")
    import Import
    objects = [obj for obj in doc.Objects if hasattr(obj, 'Shape')]
    if objects:
        Import.export(objects, step_path)
        print(f"[FreeCAD] STEP file exported to: {{step_path}}")

    print(f"[FreeCAD] Generation {generation_id} completed successfully")

except Exception as e:
    print(f"[FreeCAD] Error in generation {generation_id}: {{e}}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
'''
        return template

    def _indent_code(self, code: str, spaces: int = 4) -> str:
        """Indent code for template insertion"""
        lines = code.split("\\n")
        indented_lines = [
            " " * spaces + line if line.strip() else line for line in lines
        ]
        return "\\n".join(indented_lines)

    def execute_generated_code(self, code_file: Path) -> bool:
        """Execute a generated FreeCAD code file"""

        if code_file in self.executed_files:
            logger.info(f"‚è≠Ô∏è Skipping already executed: {code_file.name}")
            return True

        try:
            logger.info(f"üîß Executing FreeCAD code: {code_file.name}")

            # Read the original code
            with open(code_file, "r") as f:
                original_code = f.read()

            # Extract metadata from JSON file
            json_file = code_file.with_suffix(".json")
            if json_file.exists():
                with open(json_file, "r") as f:
                    metadata = json.load(f)
                generation_id = metadata.get("generation_id", 0)
                requirements = metadata.get("requirements", "No requirements specified")
            else:
                generation_id = 0
                requirements = "No requirements available"

            # Create enhanced FreeCAD script
            enhanced_code = self.get_freecad_template(
                original_code, generation_id, requirements
            )

            # Write enhanced script
            enhanced_file = code_file.parent / f"enhanced_{code_file.name}"
            with open(enhanced_file, "w") as f:
                f.write(enhanced_code)

            # Execute with FreeCAD
            freecad_cmd = f"freecad --console --run-python {enhanced_file}"
            logger.info(f"üöÄ Running: {freecad_cmd}")

            result = os.system(freecad_cmd)

            if result == 0:
                logger.info(f"‚úÖ FreeCAD execution successful: {code_file.name}")
                self.executed_files.add(code_file)
                return True
            else:
                logger.error(
                    f"‚ùå FreeCAD execution failed: {code_file.name} (exit code: {result})"
                )
                return False

        except Exception as e:
            logger.error(f"‚ùå Execution error for {code_file.name}: {e}")
            return False

    def monitor_and_execute(self, check_interval: int = 10):
        """Monitor session directory and execute new code files"""

        logger.info(f"üëÅÔ∏è Monitoring session directory: {self.session_dir}")
        logger.info(f"üîÑ Check interval: {check_interval} seconds")

        try:
            while True:
                # Find all Python code files
                code_files = list(self.session_dir.glob("generation_*.py"))

                # Execute new files
                new_files = [f for f in code_files if f not in self.executed_files]

                if new_files:
                    logger.info(f"üîç Found {len(new_files)} new files to execute")

                    for code_file in sorted(new_files):
                        self.execute_generated_code(code_file)
                        time.sleep(2)  # Brief pause between executions
                else:
                    logger.debug(
                        f"‚è≥ No new files found (checked {len(code_files)} total)"
                    )

                time.sleep(check_interval)

        except KeyboardInterrupt:
            logger.info("üõë Monitoring stopped by user")
        except Exception as e:
            logger.error(f"‚ùå Monitoring error: {e}")


def main():
    """Main entry point"""
    import argparse

    parser = argparse.ArgumentParser(description="FreeCAD Code Executor")
    parser.add_argument("session_dir", help="Session directory to monitor")
    parser.add_argument(
        "--interval",
        type=int,
        default=10,
        help="Check interval in seconds (default: 10)",
    )
    parser.add_argument(
        "--execute-existing",
        action="store_true",
        help="Execute existing files in session directory",
    )

    args = parser.parse_args()

    if not os.path.exists(args.session_dir):
        logger.error(f"‚ùå Session directory not found: {args.session_dir}")
        return 1

    executor = FreeCADExecutor(args.session_dir)

    if args.execute_existing:
        # Execute all existing files first
        code_files = list(Path(args.session_dir).glob("generation_*.py"))
        logger.info(f"üîß Executing {len(code_files)} existing files...")

        for code_file in sorted(code_files):
            executor.execute_generated_code(code_file)
            time.sleep(2)

    # Start monitoring
    executor.monitor_and_execute(args.interval)

    return 0


if __name__ == "__main__":
    sys.exit(main())
